//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FolderDAOImpl.java
//  @ Date : 2014-07-19
//  @ Author : 
//
//
package com.soloud.per.daoimpl;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;

import com.soloud.per.dao.BaseDAO;
import com.soloud.per.dao.FolderDeleteDAO;
import com.soloud.per.dao.FolderInsertDAO;
import com.soloud.per.dao.FolderSearchDAO;
import com.soloud.per.dao.FolderUpdateDAO;
import com.soloud.per.dto.FolderDTO;




public class FolderDAOImpl extends BaseDAO  implements FolderSearchDAO, FolderUpdateDAO, FolderInsertDAO, FolderDeleteDAO
{
	@Override
	public boolean insertFolderDTO(FolderDTO dto) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "INSERT INTO folder_tb VALUES ("+"'fo'"+"  || folder_sequence.NEXTVAL,?,?,?,?,?)";//폴더코드,부모폴더코드,폴더이름,폴더유형,폴더url
		Object[] params = new Object[]{dto.getMemberCode(),dto.getParentFolderCode(),dto.getFolderName(),dto.getIsShareFolder(),dto.getFolderUrl()};
		int[] types = new int[]{Types.CHAR,Types.CHAR,Types.VARCHAR,Types.CHAR,Types.VARCHAR};
		int res = jdbcTemplate.update(sql,params,types);
		if(res > 0)
			return true;
		else
			return false;
	}
	public List<FolderDTO> searchAllFolder()
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public FolderDTO searchFolderCode(String folderCode)
	{
		final FolderDTO temp = new FolderDTO();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE folder_code = '"+folderCode+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler()	{
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					temp.setFolderCode(rs.getString("folder_code"));
					temp.setMemberCode(rs.getString("member_code"));
					temp.setParentFolderCode(rs.getString("parent_folder_code"));
					temp.setFolderName(rs.getString("folder_name"));
					temp.setIsShareFolder(rs.getString("is_share_folder"));
					temp.setFolderUrl(rs.getString("folder_url"));		
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public List<FolderDTO> searchMemberCode(String memberCode)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE member_code = '"+memberCode+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public List<FolderDTO> searchFolderParentCode(String parentFolderCode)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE parent_folder_code = '"+parentFolderCode+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public List<FolderDTO> searchFolderName(String folderName)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE folder_name = '"+folderName+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public List<FolderDTO> searchIsSharedFolder(String isSharedFolder)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE is_share_folder = '"+isSharedFolder+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	@Override
	public List<FolderDTO> searchMemberCodeIsSharedFolder(String memberCode,String isSharedFolder) {
		// TODO Auto-generated method stub
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE member_code = '"+memberCode+"' AND is_share_folder = '"+isSharedFolder+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;	
		
	}
	public List<FolderDTO> searchMemberCodeFolderName(String memberCode, String folderName)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE member_code = '"+memberCode+"' AND folder_name = '"+folderName+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;	
	}	
	public List<FolderDTO> searchFolderNameIsSharedFolder(String folderName, String isSharedFolder)
	{
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE folder_name = '"+folderName+"' AND is_share_folder = '"+isSharedFolder+"'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	public boolean insertFolder(String memberCode, String parentFolderCode, String folderName, String isSharedFolder, String folderUrl)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "INSERT INTO folder_tb VALUES ("+"'fo'"+"  || folder_sequence.NEXTVAL,?,?,?,?,?)";//폴더코드,부모폴더코드,폴더이름,폴더유형,폴더url
		Object[] params = new Object[]{memberCode,parentFolderCode,folderName,isSharedFolder,folderUrl};
		int[] types = new int[]{Types.CHAR,Types.CHAR,Types.VARCHAR,Types.CHAR,Types.VARCHAR};
		int res = jdbcTemplate.update(sql,params,types);
		if(res > 0)
			return true;
		else
			return false;
	}
	@Override
	public int updateFolderNameFolderCode(String folderCode,String newfolderName) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET folder_name = '"+newfolderName+"'WHERE folder_code = '" +folderCode+ "'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int updateFolderNameMemberCode(String memberCode, String folderName,String newFolderName) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET folder_name = '"+newFolderName+"'WHERE member_code = '" +memberCode+ "' AND folder_name = '"+folderName+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int updateFolderParentFolder(String folderCode,String newParentFolderCode) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET parent_folder_code = '"+newParentFolderCode+"'WHERE folder_code = '" +folderCode+ "'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int updateFolderParentFodlerMemberCode(String memberCode,String folderName, String newParentFolderCode) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET parent_folder_code = '"+newParentFolderCode+"'WHERE member_code = '" +memberCode+ "' AND folder_name = '"+folderName+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int updateFolderFolderUrl(String folderCode, String newFolderUrl) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET folder_url = '"+newFolderUrl+"'WHERE folder_code = '" +folderCode+ "'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int updateFolderURLMemberCode(String memberCode, String folderName,String newFolderUrl) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "UPDATE folder_tb SET folder_url = '"+newFolderUrl+"'WHERE member_code = '" +memberCode+ "' AND folder_name = '"+folderName+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}	
	public int deleteFolderCode(String folderCode)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE folder_code = '"+folderCode+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	
	public int deleteMemberCode(String memberCode)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE member_code = '"+memberCode+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	
	public int deleteParentFolderCode(String parentFolderCode)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE parent_folder_code = '"+parentFolderCode+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	
	public int deleteFolderName(String folderName)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE folder_name = '"+folderName+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	
	public int deleteIsSharedFolder(String isSharedFolder)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE is_share_folder = '"+isSharedFolder+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	
	public int deleteFolderUrl(String folderUrl)
	{
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE folder_url = '"+folderUrl+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public int deleteFolderMemberCode(String memberCode, String folderName) {
		// TODO Auto-generated method stub
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "DELETE FROM folder_tb WHERE member_code = '"+memberCode+"' AND folder_name ='"+folderName+"'";
		int res = jdbcTemplate.update(sql);
		return res;
	}
	@Override
	public List<FolderDTO> searchMemberCodeParentFolderCode(String memberCode,
			String parentFolderCode) {
		// TODO Auto-generated method stub
		final List<FolderDTO> temp = new ArrayList<FolderDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
		String sql = "SELECT * FROM folder_tb WHERE member_code='" + memberCode + "' AND parent_folder_code='" + parentFolderCode + "'";
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					FolderDTO tmp = new FolderDTO();
					tmp.setFolderCode(rs.getString("folder_code"));
					tmp.setMemberCode(rs.getString("member_code"));
					tmp.setParentFolderCode(rs.getString("parent_folder_code"));
					tmp.setFolderName(rs.getString("folder_name"));
					tmp.setIsShareFolder(rs.getString("is_share_folder"));
					tmp.setFolderUrl(rs.getString("folder_url"));					
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
}

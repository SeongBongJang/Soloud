//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SharedFolderReplyVDAOImpl.java
//  @ Date : 2014-07-19
//  @ Author : 
//
//
package com.soloud.per.daoimpl;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.SimpleFormatter;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;

import com.soloud.per.dao.BaseDAO;
import com.soloud.per.dao.SharedFolderReplyVDAO;
import com.soloud.per.dto.SharedFolderReplyVDTO;





public class SharedFolderReplyVDAOImpl extends BaseDAO implements SharedFolderReplyVDAO
{
	public List<SharedFolderReplyVDTO> searchSharedFolderReply()
	{
		final List<SharedFolderReplyVDTO> temp = new ArrayList<SharedFolderReplyVDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
	                                   
		String sql = "SELECT * FROM shared_folder_reply_view";

		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{
					
					Date date = rs.getDate("작성일");
					
					long time = date.getTime();
					java.util.Date d = new java.util.Date(time);
					GregorianCalendar gc = new GregorianCalendar();
					gc.setTime(d);
			
					int year = gc.get(Calendar.YEAR);
					int month = gc.get(Calendar.MONTH)+1;
					int dd = gc.get(Calendar.DATE);
					int hour = gc.get(Calendar.HOUR);
					int min = gc.get(Calendar.MINUTE);
					System.out.println(year+" "+month+" "+dd+" "+hour+" "+min);
		
					SharedFolderReplyVDTO tmp = new SharedFolderReplyVDTO();
					tmp.setMemberCode(rs.getString("사용자코드"));
					tmp.setMemberName(rs.getString("사용자이름"));
					tmp.setReplyCode(rs.getString("댓글코드"));
					tmp.setReplyContent(rs.getString("내용"));
					tmp.setReplyWriteDate(gc);
					tmp.setSharedFolderCode(rs.getString("공유폴더코드"));
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
	
	public List<SharedFolderReplyVDTO> searchSharedFolderReply(String sharedFolderCode)
	{
		final List<SharedFolderReplyVDTO> temp = new ArrayList<SharedFolderReplyVDTO>();
		JdbcTemplate jdbcTemplate = getJdbcTemplate();
	   
		String sql = "SELECT 공유폴더코드, 댓글코드, 사용자코드, 사용자이름, to_char(작성일,'YYYY-MM-DD HH24:MI:SS') \"시분초\", 내용  FROM shared_folder_reply_view WHERE \"공유폴더코드\" = '"+sharedFolderCode.trim()+" 'order by 작성일 desc";
		
		System.out.println(sql);
		jdbcTemplate.query(sql,new RowCallbackHandler(){
			@Override
			public void processRow(ResultSet rs) throws SQLException {
				// TODO Auto-generated method stub
				while(true)
				{

					/*Date date = rs.getDate("작성일");
					long time = date.getTime();
					java.util.Date d = new java.util.Date(time);
					GregorianCalendar gc = new GregorianCalendar();
					gc.setTime(d);*/
					
					///////////////////////////////////////////////
					//String stringDate = rs.getString("to_char(작성일,'MM-DD HH24:MI')");
					String stringDate = rs.getString("시분초");
					StringTokenizer stok = new StringTokenizer(stringDate, "-: ");
					String year = null;
					String month = null;
					String day = null;
					String hour = null;
					String min = null;
					String sec = null;
					while(stok.hasMoreTokens()) {
						year = stok.nextToken();
						month = stok.nextToken();
						day = stok.nextToken();
						hour = stok.nextToken();
						min = stok.nextToken();
						sec = stok.nextToken();
						System.out.println(month+day+hour+min);
					}
					
					
					SharedFolderReplyVDTO tmp = new SharedFolderReplyVDTO();
					tmp.setMemberCode(rs.getString("사용자코드"));
					tmp.setMemberName(rs.getString("사용자이름"));
					tmp.setReplyCode(rs.getString("댓글코드"));
					tmp.setReplyContent(rs.getString("내용"));
					GregorianCalendar gc = new GregorianCalendar(Integer.parseInt(year), Integer.parseInt(month)-1, Integer.parseInt(day), Integer.parseInt(hour), Integer.parseInt(min), 0);
					tmp.setReplyWriteDate(gc);
					tmp.setSharedFolderCode(rs.getString("공유폴더코드"));
					temp.add(tmp);
					if(rs.next() == false)
						break;
				}
			}
			
		});		
		return temp;
	}
}

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FriendManageServlet.java
//  @ Date : 2014-07-21
//  @ Author : 
//
//


package com.soloud.pre.servlet;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.soloud.app.man.AlarmMessageManager;
import com.soloud.app.man.FriendManager;
import com.soloud.app.man.FriendProposalManager;
import com.soloud.app.man.MemberManager;
import com.soloud.app.manInt.AlarmMessageSearchable;
import com.soloud.app.manInt.FriendDeleteable;
import com.soloud.app.manInt.FriendGroupModifiable;
import com.soloud.app.model.AlarmMessage;
import com.soloud.app.model.Friend;
import com.soloud.app.model.Group;
import com.soloud.app.model.Member;
import com.soloud.util.CheckURI;

/**
 * 친구 관리 요청을 담당하는 서블릿
 * @author 영진
 *
 */
@WebServlet(name="FriendManageServlet",urlPatterns={"/loadFriendList.do", "/dropRelationShip.do","/modifyGroup.do","/requestFriend.do","/searchMemberPage.do","/searchFriend.do"})
public class FriendManageServlet extends HttpServlet{
	/**
	 * 시리얼 번호
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 내친구, 친구신청 페이지 요청
	 * @param request
	 * @param response
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");

		//url확인
		String action = CheckURI.getLastURI(request.getRequestURL()); 
		if(action.equals("loadFriendList.do"))
		{
			loadInfo(request);			//개인 정보 가져옴
			loadFriendList(request);
			loadAlram(request, response);
			RequestDispatcher view = request.getRequestDispatcher("jsp/friendListTable.jsp");
			view.forward(request, response);
		}else if(action.equals("searchMemberPage.do"))
		{
			loadInfo(request);
			loadAlram(request, response);
			RequestDispatcher view = request.getRequestDispatcher("jsp/memberListSearchTable.jsp");
			view.forward(request, response);
		}
	}

	/**
	 * 끊기 , 그룹변경, 신청/비동기
	 * @param request
	 * @param response
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");

		/*System.out.println("searchInfo : " + request.getParameter("searchInfo"));
		System.out.println("type : " + request.getParameter("type"));*/
		//url확인
		String action = CheckURI.getLastURI(request.getRequestURL()); 
		if(action.equals("dropRelationShip.do"))
		{
			dropRelationShip(request,response);			
			return;
		}else if(action.equals("searchFriend.do"))
		{
			searchFriend(request,response);				//검색
			return;
		}else if(action.equals("requestFriend.do"))
		{
			requestFriend(request,response);			
			return;
		}else if(action.equals("modifyGroup.do"))
		{
			modifyGroup(request,response);
			return;
		}
	}
	/**
	 * 친구 끊기/비동기
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	@SuppressWarnings("unchecked")
	private void dropRelationShip(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("application/json"); 
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		//사용자 정보
		String friendMemberId = request.getParameter("friendMemberId");	//친구 멤버 아이디
		HttpSession session = request.getSession();
		String memberCode = (String)session.getAttribute("memberCode"); //사용자 멤버코드
		//친구 삭제
		FriendDeleteable friendDeleteable = new FriendManager();
		if(friendDeleteable.deleteFriend(memberCode, friendMemberId))
		{
			//종료
			json.put("isSuccess", true);
			out.print(json);
		}else{
			//종료
			json.put("isSuccess", false);
			out.print(json);
		}
	}
	/**
	 * 그룹변경 /비동기
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	@SuppressWarnings("unchecked")
	private void modifyGroup(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("application/json"); 
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		
		//사용자 정보
		String modifyFriendId = request.getParameter("friendId");	//친구 멤버 아이디
		String modifyGroupName= request.getParameter("mofidyGroup");
		HttpSession session = request.getSession();
		String memberCode = (String)session.getAttribute("memberCode"); //사용자 멤버코드
		//System.out.println("modifyFriendId : "+modifyFriendId +" | modifyGroupName:"+modifyGroupName);
		FriendGroupModifiable friendGroupModifiable = new FriendManager();
		
		
		if(friendGroupModifiable.modifyFriendGroup(memberCode, modifyFriendId, Group.valueOf(modifyGroupName))){
			json.put("isSuccess", true);
		}else{
			json.put("isSuccess", false);
		}
		

		
	}
	/**
	 * 친구신청 / 비동기
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	@SuppressWarnings("unchecked")
	private void requestFriend(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("application/json"); 
		PrintWriter out = response.getWriter();
		JSONObject json = new JSONObject();
		//사용자 정보
		String requestReceiverId = request.getParameter("requestInfo");	//친구 멤버 아이디
		HttpSession session = request.getSession();
		String memberCode = (String)session.getAttribute("memberCode"); //사용자 멤버코드
		//
		FriendProposalManager friendManager = new FriendProposalManager();
		if(friendManager.requestFriendProposal(memberCode, requestReceiverId))
		{
			json.put("isSuccess",true);
		}else{
			json.put("isSuccess",false);
			
		}
		out.print(json);
	}
	/**
	 * 친구를 검색 / 비동기
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	@SuppressWarnings("unchecked")
	private void searchFriend(HttpServletRequest request, HttpServletResponse response) throws IOException {
		response.setContentType("application/json"); 
		PrintWriter out = response.getWriter();
		JSONArray jsonArray = new JSONArray();

		//사용자 정보
		String searchInfo = request.getParameter("searchInfo").trim();			//검색할 사용자 정보	
		String type = request.getParameter("type").trim();						//검색을 호출한 곳의 정보	

		switch(type)
		{
		case "myFriend":
			loadFriendList(request);		//내 친구 목록을 전부 가져옴	

			ArrayList<Friend> tempList = (ArrayList<Friend>)request.getAttribute("friendList");//친구목록을 꺼내옴
			for(Friend list : tempList)//멤버에서 해당하는 아이디 같는 것만 고른다.
			{
				if(list.getFriendId().trim().equals(searchInfo) || list.getFriendName().trim().indexOf(searchInfo)>=0)
				{ 
					JSONObject json = new JSONObject();
					json.put("id", list.getFriendId().trim());
					json.put("name",list.getFriendName().trim());
					jsonArray.add(json);
				}
			}
			out.print(jsonArray);
			break;
		case "searchMember":		
			MemberManager memberManager = new MemberManager();
			Member member = memberManager.searchMemberCode((String)request.getSession().getAttribute("memberCode"));
			ArrayList<Member> memberList = (ArrayList<Member>)memberManager.searchMember();
			
			
			for(int i = 0 ; i < memberList.size(); i++){	
				if(memberList.get(i).getId().trim().equals("admin") || memberList.get(i).getId().trim().equals(member.getId().trim())){
					memberList.remove(i);
					i--;
				}
			}
			if(searchInfo.trim().equals(""))
			{
				for(Member list : memberList)
				{
					JSONObject json = new JSONObject();
					json.put("id", list.getId().trim());
					json.put("name",list.getName().trim());
					jsonArray.add(json);
				}
			}else{
				for(Member list : memberList)
				{
					if(list.getId().trim().equals(searchInfo) || list.getName().trim().indexOf(searchInfo)>=0)
					{ 
						JSONObject json = new JSONObject();
						json.put("id", list.getId().trim());
						json.put("name",list.getName().trim());
						jsonArray.add(json);
					}
				}
			}
			out.print(jsonArray);
			break;
		}

	}
	/**
	 * 친구목록으로 로드해옴
	 * @param request
	 */
	private void loadFriendList(HttpServletRequest request) {
		//회원 코드 가져옴
		String memberCode= (String)request.getSession().getAttribute("memberCode");	
		FriendManager friendManager = new FriendManager();
		ArrayList<Friend> memberFriend = (ArrayList<Friend>)friendManager.searchFriendList(memberCode);
		request.setAttribute("friendList", memberFriend);
	}
	/**
	 * 개인정보를 가져옴
	 * 
	 * 
	 * 
	 * @param request
	 */
	private void loadInfo(HttpServletRequest request) {
		//회원 코드 가져옴
		String memberCode= (String)request.getSession().getAttribute("memberCode");	
		MemberManager manager = new MemberManager();									//멤버코드에 해당하는 정보를 가져오기 위해 MemberManager
		Member member= manager.searchMemberCode(memberCode);										//searchMemberId()를 통해 멤버의 정보를 가져옴
		request.setAttribute("member", member);										//검색한 멤버정보를 세션에 넣음	
	}
	private void loadAlram(HttpServletRequest request, HttpServletResponse response)
	{
		/**
		 * 사용자 알람정보 로드
		 */
		//만약 새로운 알람이 한개라도 있다면!?
		//친구신청 알림은 제외
		boolean alarmFlag=false;
		boolean friendFlag=false;
		String memberCode = (String) request.getSession().getAttribute("memberCode");
		AlarmMessageSearchable ams = new AlarmMessageManager();
		List<AlarmMessage> alarmList = ams.searchAlarmReceiverId(memberCode);
		for(AlarmMessage alarm : alarmList)
		{
			if(alarm.getMessage().trim().equals("noread") && !alarm.getAlarmMessageKind().equals("ak1"))	//안읽엇는데 알람이잇다면
			{
				alarmFlag=true;
			}
			if(alarm.getMessage().trim().equals("noread") && alarm.getAlarmMessageKind().equals("ak1"))	//안읽엇는데친구신청잇다면
			{
				friendFlag=true;
			}
		}
		
		request.getSession().setAttribute("alarmFlag", alarmFlag);
		request.getSession().setAttribute("friendFlag", friendFlag);
	}
}

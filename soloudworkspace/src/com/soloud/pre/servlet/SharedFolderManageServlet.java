//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SharedFolderManageServlet.java
//  @ Date : 2014-07-21
//  @ Author : 
//
//


package com.soloud.pre.servlet;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.soloud.app.man.FriendManager;
import com.soloud.app.man.MemberManager;
import com.soloud.app.man.SharedFolderFriendManager;
import com.soloud.app.man.SharedFolderManager;
import com.soloud.app.manInt.FriendSearchable;
import com.soloud.app.manInt.MemberSearchable;
import com.soloud.app.manInt.SharedFolderFriendInvitable;
import com.soloud.app.manInt.SharedFolderFriendSearchable;
import com.soloud.app.manInt.SharedFolderSearchable;
import com.soloud.app.model.Friend;
import com.soloud.app.model.SharedFolder;
import com.soloud.util.CheckURI;
/**
 * 공유폴더 관리 요청을 담당하는 서블릿
 * @author 영진
 *
 */
@WebServlet(name="SharedFolderManageServlet", urlPatterns={"/checkFolder.do", "/inviteFriend.do", "/loadUninvitedFriendList.do"})
public class SharedFolderManageServlet extends HttpServlet{
	/**
	 * 
	 */
	private static final long serialVersionUID = -2111872618497135753L;
	/**
	 * 
	 * @param request
	 * @param response
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		response.setCharacterEncoding("utf-8");
		request.setCharacterEncoding("utf-8");
		String action = CheckURI.getLastURI(request.getRequestURL());
		if(action.equals("loadUninvitedFriendList.do")){
			loadFriendList(request, response);			
		}
	}
	/**
	 * loadUninvitedFriendList
	 * @param request
	 * @param response
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		response.setCharacterEncoding("utf-8");
		request.setCharacterEncoding("utf-8");
		String action = CheckURI.getLastURI(request.getRequestURL());
		if(action.equals("loadFriendList.do")){
			
		} else if(action.equals("inviteFriend.do")){
			inviteSharedFolder(request, response);
			return;
		} 
		
	}	
	/**
	 * 공유폴더 추가 요청시 호출되는 메소드로 비동기로 처리됨
	 * @param request
	 * @param response
	 */
	private void addSharedFolder(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		
	}
	/**
	 * 공유폴더 삭제 요청시 호출되는 메소드로 비동기로 처리됨
	 * @param request
	 * @param response
	 */
	private void deleteSharedFolder(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
	
	}	
	/**
	 * 공유폴더 초대 요청시 호출되는 메소드로 비동기로 처리됨
	 * @param request
	 * @param response
	 */
	private void inviteSharedFolder(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		String memberCode = (String)request.getSession().getAttribute("memberCode");
		String folderCode = (String) request.getSession().getAttribute("folderCode");
		String friendCode = request.getParameter("id");
		System.out.println("memberCode : "+ memberCode+ "folderCode : " + folderCode + " friendCode  "+ friendCode);
		SharedFolderFriendInvitable sffi = new SharedFolderFriendManager();
		JSONObject json = new JSONObject();
		if(sffi.inviteSharedFolderFriend(memberCode, folderCode, friendCode)) {
			json.put("isSuccess", true);
		} else {
			json.put("isSuccess", false);
		}
		response.getWriter().print(json);
	}
	/**
	 * 공유폴더 초대 시 친구목록을 로드하는 메소드로 비동기로 처리됨
	 * @param request
	 */
	private void loadFriendList(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		//공유폴더에 초대 가능한 친구목록정보 로드
		//단 해당 공유폴더 코드에 존재하지 않는 친구들만 가능.
		String curUserCode = (String) request.getSession().getAttribute("memberCode");
		//String sharedFolderCode = (String) request.getSession().getAttribute("folderCode");
		String folderCode = (String) request.getSession().getAttribute("folderCode");
		
		
		//현재 세션에 저장되어있는 폴더코드가 공유폴더인지 아닌지 확인
		SharedFolderSearchable sharedFolderSearchable = new SharedFolderManager();
		SharedFolder sharedFolder = sharedFolderSearchable.searchSharedFolderCode(folderCode);
		System.out.println(sharedFolder);
		if(sharedFolder == null){return;}
		
		//공유폴더라면 현재 사용자의 친구 목록 정보 르드.
		FriendSearchable friendSearchable = new FriendManager();
		ArrayList<Friend> myFriendList = friendSearchable.searchFriendList(curUserCode);
		//여기 리스트에들어있는 프렌트객체에는 진짜 아이디가 들어잇음 코드아님
		
		//해당 공유폴더에 등록되지않은 친구들만 로드
		//
		//System.out.println("내친구 명수 : " + myFriendList.size());
		SharedFolderFriendSearchable sharedFolderFriendSearchable = new SharedFolderFriendManager();
		
		for(int i=0;i<myFriendList.size();i++) {
			//내 친구이지만 해당 공유폴더에 등록되지 않은 친구들만 저장
			//System.out.println("아니 왜 포문을 "+i+"번만 도는거야 사이즈 :"+myFriendList.size()+"갠대");
			//System.out.println("내친구정보 : "+myFriendList.get(i));
			String tempId = myFriendList.get(i).getFriendId().trim();
			MemberSearchable memberSearchable = new MemberManager();
			String tempCode = memberSearchable.searchMemberAdmin(tempId).trim();
			//System.out.println("검사할 대상의 정보 :"+curUserCode+"-"+sharedFolder.getSharedFolderCode().trim()+"-"+tempCode);
			if(sharedFolderFriendSearchable.alreadyInvite(curUserCode, sharedFolder.getSharedFolderCode().trim(), tempCode)){
				System.out.println("제외될 친구정보 : "+myFriendList.remove(i));
				i--;
			}
		}
		
		//친구목록 responseOUT
		
		JSONArray jsonArray = new JSONArray();
		for(Friend temp : myFriendList){
			JSONObject json = new JSONObject();

			json.put("friendId", temp.getFriendId());
			json.put("friendName", temp.getFriendName());
			//제이슨어레이에 추가
			System.out.println("보내기직전 서블릿에서 확인  :"+json);
			jsonArray.add(json);
		}
		response.getWriter().print(jsonArray);
		return;

	}
	
}

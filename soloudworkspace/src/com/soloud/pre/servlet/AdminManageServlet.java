
package com.soloud.pre.servlet;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.soloud.app.man.FileManager;
import com.soloud.app.man.MemberManager;
import com.soloud.app.manInt.FileDelable;
import com.soloud.app.manInt.FileNameModifiable;
import com.soloud.app.manInt.FileSearchable;
import com.soloud.app.manInt.MemberDropable;
import com.soloud.app.manInt.MemberInfoModifiable;
import com.soloud.app.manInt.MemberSearchable;
import com.soloud.app.model.File;
import com.soloud.app.model.Member;
import com.soloud.pre.uiform.FileSearchForm;
import com.soloud.pre.validator.FileManageValidator;
import com.soloud.util.CapacityUnitTransform;
import com.soloud.util.CheckURI;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : AdminManageServlet.java
//  @ Date : 2014-07-21
//  @ Author : 
//
//
/**
 * 
 * @author 영진
 *
 */
@WebServlet(name="AdminManageServlet", urlPatterns={
		"/adminMain.do","/adminSearchFile.do", "/adminDeleteFile.do", 
		"/adminFileNameModify.do", "/adminSearchMember.do",
		"/adminDropMember.do", "/adminModifyMemberInfo.do"})
public class AdminManageServlet  extends HttpServlet{
	/**
	 * 씨리얼 버전
	 */
	private static final long serialVersionUID = 1L;
	
	/**
	 * 
	 * @param request
	 * @param response
	 */
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		String action = CheckURI.getLastURI(request.getRequestURL());
		String dispatchUrl = null;
		if(action.equals("adminSearchMember.do")){
			dispatchUrl = "/jsp/adminSearchMember.jsp";
		}  else if(action.equals("adminMain.do")){
			dispatchUrl = "/adminSearchFile.jsp";
		}
		request.getRequestDispatcher(dispatchUrl).forward(request, response);
	}
	
	/**
	 * 
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	private void searchMember(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String condition = request.getParameter("selectType");
		String text = request.getParameter("inputType");
		
		JSONArray jsonArray = new JSONArray();
		ArrayList<Member> resultList = null;
		MemberSearchable ms = new MemberManager();
		
		if(condition.equals("all") || text.equals("")){			
			resultList =  ms.searchMember();
		} else if(condition.equals("name")){
			resultList =  ms.searchMemberName(text);
		} else if(condition.equals("id")){
			//아이디로 검색
			Member member = new Member();
			member =  ms.searchMemberId(text);
			resultList = new ArrayList<Member>();
			resultList.add(member);
		}
		for(int i=0;i<resultList.size();i++){
			JSONObject json = new JSONObject();
			json.put("id", resultList.get(i).getId());
			json.put("name", resultList.get(i).getName());
			json.put("password", resultList.get(i).getPassword());
			json.put("capacityLimit", CapacityUnitTransform.transform(resultList.get(i).getCapacityLimit()));
			json.put("usedCapacity", CapacityUnitTransform.transform(resultList.get(i).getUsedCapacity()));
			System.out.println(json);
			jsonArray.add(json);
		}
		response.getWriter().print(jsonArray);
		return ;
	}

	/**
	 * 
	 * @param request
	 * @param response
	 * @throws IOException 
	 */
	private void searchFile(HttpServletRequest request, HttpServletResponse response) throws IOException {		
		String fileType = request.getParameter("selectType").trim();
		String fileName = request.getParameter("fileName").trim();
	
		
		ArrayList<File> tempList = null;
		
		FileSearchForm fileSearchForm = new FileSearchForm();
		fileSearchForm.setFileName(fileName);
		fileSearchForm.setFileType(fileType);
		
		FileManageValidator val = new FileManageValidator();
		val.validateSearchAdmin(fileSearchForm);
		ArrayList<String> errors = val.getErrors();
		
		/*
		 * 파일 유형 검사
		 */
		FileSearchable fileSearchable = new FileManager();
		if(fileType.equals("all")){
			tempList = fileSearchable.searchAllFile();
		} else {
			tempList = fileSearchable.searchFileType("admin", fileType);
		}
		System.out.println(tempList);
		
		/*
		 * 파일명 검사
		 */
		ArrayList<File> secondList = new ArrayList<File>();
		if(fileName.equals("")){
			secondList = tempList;
		} else {
			for(File file : tempList){
				if(file.getFileName().trim().equals(fileName)){
					secondList.add(file);
				}
			}
		}
		JSONArray jsonArray = new JSONArray();
		for(int i=0;i<secondList.size();i++){
			JSONObject json = new JSONObject();
			
			json.put("fileNum", 0);

			json.put("fileCode", secondList.get(i).getFileCode());

			json.put("fileType", secondList.get(i).getFileType());

			json.put("fileName", secondList.get(i).getFileName());
			GregorianCalendar date = secondList.get(i).getLastModifyDate();
			String tempDate= ""+date.get(Calendar.YEAR)+"-"+(date.get(Calendar.MONTH)+1)+"-"+date.get(Calendar.DATE);

			json.put("date", tempDate);
			
			String uploaderId = secondList.get(i).getUploaderId();
			json.put("uploaderId", uploaderId);
			
			MemberSearchable memberSearch = (MemberSearchable)new MemberManager();
			Member member = memberSearch.searchMemberId(uploaderId);
			String uploaderName = member.getName();
			json.put("uploaderName", uploaderName);

			

			json.put("fileCapacity", CapacityUnitTransform.transform(secondList.get(i).getFileCapacity()));

			json.put("filePath", secondList.get(i).getFilePath());			
			jsonArray.add(json);
		}
		JSONObject flagJson = new JSONObject();
		flagJson.put("isEmpty", false);
		//response.getWriter().print(flagJson);
		response.getWriter().print(jsonArray);
	}

	/**
	 * 
	 * @param request
	 */
	private void loadMember(HttpServletRequest request) {
	
	}
	
	/**
	 * 
	 * @param request
	 */
	private void loadFileList(HttpServletRequest request) {
	
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		String action = CheckURI.getLastURI(request.getRequestURL());
		if(action.equals("adminDeleteFile.do")){
			deleteFile(request, response);
			return;
		} else if(action.equals("adminSearchFile.do")){
			searchFile(request, response);
			return;
		} else if(action.equals("adminFileNameModify.do")){
			modifyFileName(request, response);
			return;
		} else if(action.equals("adminSearchMember.do")){
			searchMember(request, response);
			return;
		} else if(action.equals("adminDropMember.do")){
			dropMember(request, response);
			return;
		} else if(action.equals("adminModifyMemberInfo.do")){
			modifyMemberInfo(request, response);
			return;
		}
	}
	private void deleteFile(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		JSONObject json = new JSONObject();
		String fileCode = request.getParameter("fileCode");
		System.out.println("삭제할 파일 코드 : "+fileCode);
		FileDelable fileDelabe = new FileManager();
		if(fileDelabe.deleteFileAdmin(null, "id", fileCode).equals("성공")){
			json.put("isSuccess", true);
			json.put("key", fileCode);
			
		} else {
			json.put("isSuccess", false);
		}
		response.getWriter().print(json);
		
		
	}
	private void modifyFileName(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		String memberCode = request.getParameter("memberCode");
		String fileCode = request.getParameter("fileCode");
		String newFileName = request.getParameter("newFileName");
		System.out.println("수정코드 : " +memberCode);
		System.out.println("파일코드 : " +fileCode);
		System.out.println("수정할이름  : "+newFileName);
		
		FileNameModifiable fileNameModifiable = new FileManager();
		//String result = fileNameModifiable.modifyFileName(null, fileCode, newFileName);
		String result = fileNameModifiable.modifyFileNameAdmin(null, memberCode, fileCode, newFileName);
		System.out.println("수정결과 : "+result);
		JSONObject json = new JSONObject();
		if(result.equals("성공")){
			json.put("isSuccess", true);
			json.put("fileCode", fileCode);
			json.put("newFileName", newFileName);
		} else if (result.equals("이름중복")){
			json.put("isSuccess", false);
			json.put("reason", "이름중복");
		} else {
			json.put("isSuccess", false);
			json.put("reason", "실패");
		}
		response.getWriter().print(json);
		return;
	}
	private void dropMember(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException{
		String id = request.getParameter("memberId");
		System.out.println("탈퇴할 사람의 아이디 : "+ id);
		MemberSearchable md = new MemberManager();
		String code = md.searchMemberAdmin(id);
		System.out.println("탈퇴할 사람의 회원코드 : "+ code);
		JSONObject json = new JSONObject();
		if(((MemberDropable)md).dropMember(code)){
			json.put("isSuccess", true);
		} else {
			json.put("isSuccess", false);
		}
		response.getWriter().print(json);
	}
	private void modifyMemberInfo(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		/*
		 * 회원정보 수정
		 */
		/*
		 * {memberId : id, memberName : name, memberPassword : password, memberLimitCapacity : limitCapacity}
		 */
		/*
		 * 아이디 존재여부 검사
		 */
		MemberSearchable md = new MemberManager();
		String id = request.getParameter("memberId");
		String memberCode = md.searchMemberAdmin(id);
		Member member = md.searchMemberCode(memberCode);
		System.out.println("회원정보 수정대상 : "+member);
		JSONArray jsonArray = new JSONArray();
		if(memberCode == null || memberCode.equals("") || member == null){
			JSONObject json = new JSONObject();
			json.put("isSuccess", false);
			jsonArray.add(json);
			response.getWriter().print(jsonArray);
			return;
		} else {
			String name = request.getParameter("memberName").trim();//아이디
			String password = request.getParameter("memberPassword").trim();//비번
			String capacityLimit = request.getParameter("memberLimitCapacity").trim();//최대용량
			double byteData = Float.parseFloat(capacityLimit)*1024*1024;
			System.out.println("바이트데이터 : "+byteData);
			if(!name.equals("")){//이름을 빈칸으로 하지 않을 경우 이름을 새롭게 적용
				member.setName(name);
			}
			if(!password.equals("")){//비밀번호를 빈칸으로 하지않을 경우 비번을 새롭게 적용
				member.setPassword(password);
			}
			if(!capacityLimit.equals("")){//최대용량을 빈칸으로 하지않은 경우 최대용량을 새롭게 적용
				member.setCapacityLimit(Float.parseFloat(""+byteData));
				//
			}
			((MemberInfoModifiable)md).modifyMemberInfo(memberCode, Float.parseFloat(""+byteData));//용량수정
			member.setId(id);
			((MemberInfoModifiable)md).modifyMemberInfo(member);
			if(true){
				jsonArray.add(member.getName());
				jsonArray.add(member.getPassword());
				jsonArray.add(member.getCapacityLimit());
				response.getWriter().print(jsonArray);
				return;
			} 
		}		
	}
}
